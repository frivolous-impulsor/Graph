MST(){
    s = 0   //starting vertex
    mstSet  //set that marks vertices that are connected at current mst. Begin with starting vertex
    minPQ   //initialize a minimum priority queue of (v, distance)
    mst     //a list of edges that, at the end, will connect all vertices and has smallest overall weight
            //mst[v] = edge connected to v that forms the mst
            //mst[s] will have null, meaning no edge connected to s
    insert s in minPQ to val 0
    insert any v thats not s in minPQ to val inf    //not yet seen an edge connecting to v, thus inf so far

    while mstSet not yet have all vertices:
        u = minPQ.pop()     //get new candidate to be inducted into mstSet, from which explore edges 
        mstSet.add(u);
        for edge from edges at u:
            v is the vertex connected from u through edge
            if v not in mstSet & w(u,v) < value of v:     //found a cut 
                v's value in minPQ update to min{v.value, w(u,v)}
                mst[v] = edge
    return mst
}

Dikstra(int s, int e){//shortest path from vertex s to vertex e
    int fromArray  //record the previous node for each node on shortest path, initialized to all -1
    minPQ   //minimum priority queue that takes in vertex and its shortest distance to s pair
    for any vertex u, insert to minPQ <u, inf>  //so far, all vertex is not yet reached, so distance to s is inf
    minPQ.update(s, 0)  //s is 0 distance away from s itself
    while minPQ not empty{
        int u = minPQ.pop()
        double distanceToStart = minPQ.getVal(u)
        for edge of edges u connected to still in minPQ{
            int v   //vertex other than u in edge
            if (weight+distanceToStart) of edge smaller than v's known distance to s{
                update value of v in minPQ to (weight + distanceToStart)
                fromArray[v] = u

            }
        }
    }
    return (fromArray, minPQ.getVal(v))     //path and total distance

}